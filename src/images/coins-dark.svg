<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   viewBox="0 0 512 512"
   version="1.1"
   id="svg6"
   sodipodi:docname="coins-dark.svg"
   inkscape:version="1.2.1 (9c6d41e410, 2022-07-14)"
   xml:space="preserve"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs10" /><sodipodi:namedview
     id="namedview8"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     showgrid="false"
     inkscape:zoom="1.1844868"
     inkscape:cx="124.94863"
     inkscape:cy="325.4574"
     inkscape:window-width="1920"
     inkscape:window-height="1131"
     inkscape:window-x="0"
     inkscape:window-y="0"
     inkscape:window-maximized="1"
     inkscape:current-layer="svg6" /><script
     id="script2">(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><!--! Font Awesome Pro 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><rect
     style="opacity:0.1;fill:#303031;fill-opacity:1;stroke:#303031;stroke-width:2.33809;stroke-opacity:1"
     id="rect955"
     width="513.86053"
     height="513.9115"
     x="-0.38782674"
     y="0.63356388" /><g
     id="g6012"
     transform="matrix(1.0061102,0,0,0.9999862,0.00593859,0.00355592)"
     style="stroke:#303031;stroke-opacity:1"><path
       style="display:inline;fill:#303031;fill-opacity:1;stroke:#303031;stroke-width:1.89876;stroke-opacity:1"
       d="M 0.81456693,257.81043 V 2.0364173 H 254.95945 509.10433 V 257.81043 513.58445 H 254.95945 0.81456693 Z M 448.62468,260.05049 448.83025,91.63878 H 254.55411 60.277953 v 168.61704 168.61703 l 194.070567,-0.20532 194.07058,-0.20532 z"
       id="path5207" /></g><rect
     style="fill:#303031;fill-opacity:1;stroke:#303031;stroke-width:0;stroke-dasharray:none;stroke-opacity:1"
     id="rect14219"
     width="115.18043"
     height="370.43668"
     x="30.580885"
     y="78.023636" /><rect
     style="fill:#303031;fill-opacity:1;stroke:#303031;stroke-width:0;stroke-dasharray:none;stroke-opacity:1"
     id="rect14219-3"
     width="115.18043"
     height="370.43668"
     x="357.94116"
     y="76.076271" /><rect
     style="fill:#303031;fill-opacity:1;stroke:#303031;stroke-width:0;stroke-dasharray:none;stroke-opacity:1"
     id="rect14248"
     width="346.45477"
     height="85.809845"
     x="83.000084"
     y="85.00518" /><rect
     style="fill:#303031;fill-opacity:1;stroke:#303031;stroke-width:0;stroke-dasharray:none;stroke-opacity:1"
     id="rect14252"
     width="309.78607"
     height="89.134071"
     x="107.41401"
     y="350.08569" /><rect
     style="fill:#303031;stroke:#303031;stroke-width:0"
     id="rect501"
     width="270.9111"
     height="204.2881"
     x="137.54968"
     y="163.04529" /><path
     d="m 400.30826,155.21743 c 0,10.125 -8.04375,19.4625 -21.6,27 -16.36875,9.05625 -40.78125,15.46875 -68.79375,17.38125 -2.08125,-1.0125 -4.1625,-1.96875 -6.35625,-2.8125 -22.1625,-9.28125 -51.6375,-14.56875 -83.25,-14.56875 -4.66875,0 -9.225,0.1125 -13.78125,0.3375 l -0.61875,-0.3375 c -13.55625,-7.5375 -21.6,-16.875 -21.6,-27 0,-24.8625 48.375,-45 108,-45 59.625,0 108,20.1375 108,45 z m -197.60625,45.61875 c 5.7375,-0.39375 11.64375,-0.61875 17.60625,-0.61875 34.9875,0 66.0375,6.91875 85.78125,17.6625 13.95,7.59375 22.21875,17.04375 22.21875,27.3375 0,2.25 -0.39375,4.44375 -1.18125,6.58125 -2.5875,7.425 -9.5625,14.23125 -19.6875,19.96875 0,0 0,0 0,0 -0.0562,0.0563 -0.16875,0.0563 -0.225,0.1125 v 0 0 c -0.16875,0.1125 -0.3375,0.16875 -0.50625,0.28125 -19.6875,10.9125 -51.075,18 -86.4,18 -33.525,0 -63.50625,-6.35625 -83.3625,-16.36875 -1.06875,-0.50625 -2.08125,-1.06875 -3.09375,-1.63125 -13.5,-7.48125 -21.54375,-16.81875 -21.54375,-26.94375 0,-19.575 30.0375,-36.28125 72,-42.4125 5.90625,-0.84375 12.0375,-1.51875 18.39375,-1.96875 z m 143.60625,44.38125 c 0,-12.31875 -5.9625,-22.44375 -13.55625,-30.0375 15.91875,-2.475 30.4875,-6.4125 42.8625,-11.53125 9.16875,-3.825 17.71875,-8.55 24.69375,-14.34375 v 19.9125 c 0,10.85625 -9.28125,20.86875 -24.6375,28.63125 -8.2125,4.1625 -18.225,7.70625 -29.475,10.40625 0.0562,-1.0125 0.1125,-1.96875 0.1125,-2.98125 z m -18,54 c 0,10.125 -8.04375,19.4625 -21.6,27 -1.0125,0.5625 -2.025,1.06875 -3.09375,1.63125 -19.8,10.0125 -49.78125,16.36875 -83.30625,16.36875 -35.325,0 -66.7125,-7.0875 -86.4,-18 -13.55625,-7.5375 -21.6,-16.875 -21.6,-27 v -19.9125 c 7.03125,5.79375 15.525,10.51875 24.69375,14.34375 22.21875,9.28125 51.69375,14.56875 83.30625,14.56875 31.6125,0 61.0875,-5.2875 83.30625,-14.56875 4.3875,-1.8 8.60625,-3.88125 12.6,-6.13125 3.43125,-1.9125 6.6375,-4.05 9.675,-6.3 0.84375,-0.61875 1.63125,-1.29375 2.41875,-1.9125 v 1.9125 3.20625 z m 18,0 v -18 -14.56875 c 10.6875,-2.3625 20.53125,-5.34375 29.30625,-9 9.16875,-3.825 17.71875,-8.55 24.69375,-14.34375 v 19.9125 c 0,5.90625 -2.8125,11.8125 -8.38125,17.38125 -9.16875,9.16875 -25.3125,16.70625 -45.73125,21.6 0.0562,-0.95625 0.1125,-1.96875 0.1125,-2.98125 z m -126,63 c 31.6125,0 61.0875,-5.2875 83.30625,-14.56875 9.16875,-3.825 17.71875,-8.55 24.69375,-14.34375 v 19.9125 c 0,24.8625 -48.375,45 -108,45 -59.625,0 -108,-20.1375 -108,-45 v -19.9125 c 7.03125,5.79375 15.525,10.51875 24.69375,14.34375 22.21875,9.28125 51.69375,14.56875 83.30625,14.56875 z"
     id="path549"
     style="stroke-width:0.5625;fill:#ffffff" /></svg>
